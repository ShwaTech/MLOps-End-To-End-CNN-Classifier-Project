pipeline {
  agent any

  environment {
    ECR_REPOSITORY       = credentials('ECR_REPOSITORY')
    AWS_ACCOUNT_ID       = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID    = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    AWS_DEFAULT_REGION   = credentials('AWS_DEFAULT_REGION')
  }

  stages {
    stage('Continuous Integration') {
      steps {
        script {
          echo "‚úÖ Linting repository"
          echo "‚úÖ Running unit tests"
        }
      }
    }

    stage('Build and Push Image on EC2') {
      steps {
        sshagent(['ssh_key']) {
          sh '''
            ssh -o StrictHostKeyChecking=no ubuntu@3.232.58.183 "
              echo '--- üßπ Cleaning old project ---' &&
              cd /home/ubuntu &&
              rm -rf MLOps-End-To-End-CNN-Classifier-Project || true &&

              echo '--- üì¶ Cloning latest code ---' &&
              git clone https://github.com/ShwaTech/MLOps-End-To-End-CNN-Classifier-Project.git &&
              cd MLOps-End-To-End-CNN-Classifier-Project &&

              echo '--- üîê Logging into ECR ---' &&
              aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com &&

              echo '--- üèóÔ∏è Building Docker Image ---' &&
              docker build -t ${ECR_REPOSITORY}:latest . &&

              echo '--- üöÄ Pushing Docker Image to ECR ---' &&
              docker push ${ECR_REPOSITORY}:latest
            "
          '''
        }
      }
    }

    stage('Continuous Deployment') {
      steps {
        sshagent(['ssh_key']) {
          sh '''
            ssh -o StrictHostKeyChecking=no ubuntu@3.232.58.183 "
              echo '--- üîÑ Deploying container ---' &&

              cd /home/ubuntu/ &&

              # Download the latest docker-compose file
              wget -O docker-compose.yml https://raw.githubusercontent.com/ShwaTech/MLOps-End-To-End-CNN-Classifier-Project/refs/heads/main/docker-compose.yml &&

              # Export the image name (for docker-compose.yml)
              export IMAGE_NAME=${ECR_REPOSITORY}:latest &&

              # Login to ECR
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com &&

              # Stop & remove old containers not at first time (safe)
              docker compose down || true &&

              # Run Docker Compose
              docker compose up -d &&

              echo '--- ‚úÖ Deployment complete ---'
            "
          '''
        }
      }
    }
  }

  post {
    always {
      echo "üßπ Cleaning up Docker resources on EC2..."
      sshagent(['ssh_key']) {
        sh '''
          ssh -o StrictHostKeyChecking=no ubuntu@3.232.58.183 "docker system prune -f || true"
        '''
      }
    }
  }
}
